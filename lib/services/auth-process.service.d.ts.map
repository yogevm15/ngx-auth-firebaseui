{"version":3,"file":"auth-process.service.d.ts","sources":["auth-process.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import '@firebase/auth';\nimport { EventEmitter } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport firebase from 'firebase/app';\nimport { Observable } from 'rxjs';\nimport { ICredentials, ISignInProcess, ISignUpProcess, NgxAuthFirebaseUIConfig } from '../interfaces';\nimport { FirestoreSyncService } from './firestore-sync.service';\nimport UserCredential = firebase.auth.UserCredential;\nexport declare const facebookAuthProvider: firebase.auth.FacebookAuthProvider;\nexport declare const googleAuthProvider: firebase.auth.GoogleAuthProvider;\nexport declare const appleAuthProvider: firebase.auth.OAuthProvider;\nexport declare const twitterAuthProvider: firebase.auth.TwitterAuthProvider;\nexport declare const githubAuthProvider: firebase.auth.GithubAuthProvider;\nexport declare const microsoftAuthProvider: firebase.auth.OAuthProvider;\nexport declare const yahooAuthProvider: firebase.auth.OAuthProvider;\nexport declare enum AuthProvider {\n    ALL = \"all\",\n    ANONYMOUS = \"anonymous\",\n    EmailAndPassword = \"firebase\",\n    Google = \"google\",\n    Apple = \"apple\",\n    Facebook = \"facebook\",\n    Twitter = \"twitter\",\n    Github = \"github\",\n    Microsoft = \"microsoft\",\n    Yahoo = \"yahoo\",\n    PhoneNumber = \"phoneNumber\"\n}\nexport declare class AuthProcessService implements ISignInProcess, ISignUpProcess {\n    afa: AngularFireAuth;\n    config: NgxAuthFirebaseUIConfig;\n    private snackBar;\n    private fireStoreService;\n    private matSnackBarConfig;\n    onSuccessEmitter: EventEmitter<any>;\n    onErrorEmitter: EventEmitter<any>;\n    private _user$;\n    get user$(): Observable<firebase.User | null>;\n    /**\n     * @deprecated access via user$ asynchronously instead\n     */\n    user: firebase.User;\n    messageOnAuthSuccess: string;\n    messageOnAuthError: string;\n    emailConfirmationSent: boolean;\n    emailToConfirm: string;\n    constructor(afa: AngularFireAuth, config: NgxAuthFirebaseUIConfig, snackBar: MatSnackBar, fireStoreService: FirestoreSyncService, matSnackBarConfig: MatSnackBarConfig);\n    listenToUserEvents(): void;\n    /**\n     * Reset the password of the ngx-auth-firebaseui-user via email\n     *\n     * @param email - the email to reset\n     */\n    resetPassword(email: string): Promise<void>;\n    /**\n     * General sign in mechanism to authenticate the users with a firebase project\n     * using a traditional way, via username and password or by using an authentication provider\n     * like google, facebook, twitter and github\n     *\n     * @param provider - the provider to authenticate with (google, facebook, twitter, github)\n     * @param credentials optional email and password\n     */\n    signInWith(provider: AuthProvider, credentials?: ICredentials): Promise<void>;\n    /**\n     * Sign up new users via email and password.\n     * After that the ngx-auth-firebaseui-user should verify and confirm an email sent via the firebase\n     *\n     * @param displayName - the displayName if the new ngx-auth-firebaseui-user\n     * @param credentials email and password\n     * @returns -\n     */\n    signUp(displayName: string, credentials: ICredentials): Promise<void>;\n    sendNewVerificationEmail(): Promise<void | never>;\n    signOut(): Promise<void>;\n    /**\n     * Update the profile (name + photo url) of the authenticated ngx-auth-firebaseui-user in the\n     * firebase authentication feature (not in firestore)\n     *\n     * @param name - the new name of the authenticated ngx-auth-firebaseui-user\n     * @param photoURL - the new photo url of the authenticated ngx-auth-firebaseui-user\n     * @returns -\n     */\n    updateProfile(name: string, photoURL: string): Promise<void>;\n    parseUserInfo(user: firebase.User): firebase.UserInfo;\n    getUserPhotoUrl(): Observable<string | null>;\n    getPhotoPath(image: string): string;\n    signInWithPhoneNumber(): void;\n    handleSuccess(userCredential: UserCredential): Promise<void>;\n    handleError(error: any): void;\n    reloadUserInfo(): import(\"rxjs\").Subscription;\n    getMessageOnAuthError(error: any): any;\n    showToast(message: string): void;\n    showErrorToast(error: any): void;\n    notifyError(error: any): void;\n}\n"]}